@page "/issues"
@inject IIsueService issueService;
@inject NavigationManager navigationManager;

@if (issueListDto.Issues == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <NavLink class="nav-link" href="/issues/create">
        <button class="btn btn-primary">Create issue</button>
    </NavLink>

    <table class="table table-striped table-bordered">
        <thead class="table-primary">
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Issue date</th>
                <th scope="col">Return date</th>
                <th scope="col">Returned</th>
                <th scope="col">Book</th>
                <th scope="col">Reader</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var issue in issueListDto.Issues)
            {
                <tr score="row">
                    <td>@issue.Id</td>
                    <td>@issue.IssueDate</td>
                    <td>@issue.ReturnDate</td>
                    <td>@issue.Returned</td>
                    <td>@issue.Book.Title</td>
                    <td>@issue.Reader.FirstName @issue.Reader.LastName</td>
                    <td>
                        <div class="mb-0">
                            <button class="btn btn-primary" @onclick="@(() => OnUpdate(issue.Id))">Update</button>
                            <button class="btn btn-danger" @onclick="@(() => OnDelete(issue.Id))">Delete</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private IssueListDto issueListDto = new IssueListDto();

    protected override async Task OnInitializedAsync()
    {
        issueListDto.Issues = (await issueService.GetAllAsync()).Select(i => new IssueLookup()
            {
                Id = i.Id,
                IssueDate = i.IssueDate,
                ReturnDate = i.ReturnDate,
                Returned = i.Returned,
                Reader = new ReaderLookup()
                {
                    Id = i.Reader.Id,
                    FirstName = i.Reader.FirstName,
                    LastName = i.Reader.LastName,
                    Email = i.Reader.Email,
                    PhoneNumber = i.Reader.PhoneNumber
                },
                Book = new BookLookup()
                {
                    Id = i.Book.Id,
                    Title = i.Book.Title,
                    CountPage = i.Book.CountPage,
                    Publication_year = i.Book.Publication_year,
                    Available = i.Book.Available,
                }
            }).ToList();
    }

    public async Task OnDelete(int bookId)
    {
        await issueService.DeleteAsync(bookId);
        issueListDto.Issues = (await issueService.GetAllAsync()).Select(i => new IssueLookup()
            {
                Id = i.Id,
                IssueDate = i.IssueDate,
                ReturnDate = i.ReturnDate,
                Returned = i.Returned,
                Reader = new ReaderLookup()
                {
                    Id = i.Reader.Id,
                    FirstName = i.Reader.FirstName,
                    LastName = i.Reader.LastName,
                    Email = i.Reader.Email,
                    PhoneNumber = i.Reader.PhoneNumber
                },
                Book = new BookLookup()
                {
                    Id = i.Book.Id,
                    Title = i.Book.Title,
                    CountPage = i.Book.CountPage,
                    Publication_year = i.Book.Publication_year,
                    Available = i.Book.Available,
                }
            }).ToList();
    }

    public void OnUpdate(int issueId)
    {
        navigationManager.NavigateTo($"/issues/edit/{issueId}");
    }

}
