@page "/readers/edit/{Id:int}";
@using LibraryBlazor.DTOs.Create
@inject IReaderService readerService;
@inject NavigationManager navigationManager;

<h2 class="mb-3">Create reader</h2>

@if (CreateReaderModel == null)
{
    <p><em>Not found reader with id: @Id</em></p>
}
else
{
    <EditForm Model="CreateReaderModel" FormName="createReader" OnValidSubmit="@OnFormSubmitAsync">
        <DataAnnotationsValidator />

        <div class="form-group mb-3">
            <label>First Name</label>
            <InputText @bind-Value=CreateReaderModel.FirstName class="form-control" placeholder="Enter first name">@CreateReaderModel.FirstName</InputText>
            <ValidationMessage For="@(() => CreateReaderModel.FirstName)" />
        </div>

        <div class="form-group mb-3">
            <label>Last Name</label>
            <InputText @bind-Value=CreateReaderModel.LastName class="form-control" placeholder="Enter last name">@CreateReaderModel.LastName</InputText>
            <ValidationMessage For="@(() => CreateReaderModel.LastName)" />
        </div>

        <div class="form-group mb-3">
            <label>Email</label>
            <InputText @bind-Value=CreateReaderModel.Email class="form-control" placeholder="Enter email">@CreateReaderModel.Email</InputText>
            <ValidationMessage For="@(() => CreateReaderModel.Email)" />
        </div>

        <div class="form-group mb-3">
            <label>Phone</label>
            <InputText @bind-Value=CreateReaderModel.PhoneNumber class="form-control" placeholder="Enter phone number">@CreateReaderModel.PhoneNumber</InputText>
            <ValidationMessage For="@(() => CreateReaderModel.PhoneNumber)" />
        </div>

        <div class="form-group">
            <button type="submit" class="btn btn-success">Submit</button>
            <NavLink href="/readers"><button type="button" class="btn btn-danger">Cancel</button></NavLink>
        </div>

    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public CreateReaderDto CreateReaderModel { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var reader = await readerService.GetAsync(Id);

        if (reader == null)
        {
            return;
        }

        CreateReaderModel = new CreateReaderDto()
            {
                Id = reader.Id,
                FirstName = reader.FirstName,
                LastName = reader.LastName,
                Email = reader.Email,
                PhoneNumber = reader.PhoneNumber
            };
    }

    public async Task OnFormSubmitAsync()
    {
        var reader = new Reader()
            {
                Id = CreateReaderModel.Id,
                FirstName = CreateReaderModel.FirstName,
                LastName = CreateReaderModel.LastName,
                Email = CreateReaderModel.Email,
                PhoneNumber = CreateReaderModel.PhoneNumber
            };

        await readerService.UpdateAsync(Id, reader);
        navigationManager.NavigateTo("/readers");
    }
}
