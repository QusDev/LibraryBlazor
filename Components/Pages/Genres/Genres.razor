@page "/genres"
@using LibraryBlazor.DTOs.List
@using LibraryBlazor.Lookups
@inject IGenreService genreService;
@inject NavigationManager navigationManager;

@if (genreList.Genres == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <NavLink class="nav-link" href="/genres/create">
        <button class="btn btn-primary">Create Genre</button>
    </NavLink>

    <table class="table table-striped table-bordered">
        <thead class="table-primary">
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Name</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var genre in genreList.Genres)
            {
                <tr score="row">
                    <td>@genre.Id</td>
                    <td>@genre.Name</td>
                    <td>
                        <div class="mb-0">
                            <button class="btn btn-primary" @onclick="@(() => OnUpdate(genre.Id))">Update</button>
                            <button class="btn btn-danger" @onclick="@(() => OnDelete(genre.Id))">Delete</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private GenreListDto genreList = new GenreListDto();

    protected override async Task OnInitializedAsync()
    {
        genreList.Genres = (await genreService.GetAllAsync()).Select(g => new GenreLookup()
            {
                Id = g.Id,
                Name = g.Name
            }).ToList();
    }

    public async Task OnDelete(int genreId)
    {
        await genreService.DeleteAsync(genreId);
        genreList.Genres = (await genreService.GetAllAsync()).Select(g => new GenreLookup()
            {
                Id = g.Id,
                Name = g.Name
            }).ToList();
    }

    public void OnUpdate(int genreId)
    {
        navigationManager.NavigateTo($"/genres/edit/{genreId}");
    }

}
