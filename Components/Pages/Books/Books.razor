@page "/books"
@using LibraryBlazor.DTOs.List
@using LibraryBlazor.Lookups
@inject IBookService bookService;
@inject NavigationManager navigationManager;

@if (booksDto.Books == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <NavLink class="nav-link" href="/books/create">
        <button class="btn btn-primary">Create Book</button>
    </NavLink>

    <table class="table table-striped table-bordered">
        <thead class="table-primary">
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Title</th>
                <th scope="col">Publication year</th>
                <th scope="col">Count page</th>
                <th scope="col">Available</th>
                <th scope="col">Genres</th>
                <th scope="col">Authors</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in booksDto.Books)
            {
                <tr score="row">
                    <td>@book.Id</td>
                    <td>@book.Title</td>
                    <td>@book.Publication_year</td>
                    <td>@book.CountPage</td>
                    <td>@book.Available</td>
                    <td>
                        @foreach (var genre in book.Genres)
                        {
                            <span>@genre.Name; </span>
                        }
                    </td>
                    <td>
                        @foreach (var author in book.Authors)
                        {
                            <span>@author.FirstName, @author.LastName; </span>
                        }
                    </td>
                    <td>
                        <div class="mb-0">
                            <button class="btn btn-primary" @onclick="@(() => OnUpdate(book.Id))">Update</button>
                            <button class="btn btn-danger" @onclick="@(() => OnDelete(book.Id))">Delete</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private BookListDto booksDto = new BookListDto();

    protected override async Task OnInitializedAsync()
    {
        booksDto.Books = (await bookService.GetAllAsync()).Select(b => new BookLookup()
            {
                Id = b.Id,
                Title = b.Title,
                CountPage = b.CountPage,
                Publication_year = b.Publication_year,
                Available = b.Available,
                Authors = bookService.GetAuthors(b.Id),
                Genres = bookService.GetGenres(b.Id)
            }).ToList();
    }

    public async Task OnDelete(int bookId)
    {
        await bookService.DeleteAsync(bookId);
        booksDto.Books = (await bookService.GetAllAsync()).Select(b => new BookLookup()
            {
                Id = b.Id,
                Title = b.Title,
                CountPage = b.CountPage,
                Publication_year = b.Publication_year,
                Available = b.Available,
                Authors = bookService.GetAuthors(b.Id),
                Genres = bookService.GetGenres(b.Id)
            }).ToList();
    }

    public void OnUpdate(int bookId)
    {
        navigationManager.NavigateTo($"/books/edit/{bookId}");
    }

}
